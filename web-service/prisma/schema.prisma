generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Supabase auth.users 테이블과 연동하는 사용자 메타데이터
model UserMetadata {
  id        String   @id @db.Uuid() // Supabase auth.users.id (UUID)
  fullName  String?  @map("full_name")
  phone     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  orders    Order[]
  addresses Address[]
  reviews   Review[]

  @@map("user_metadata")
}

model Address {
  id          String  @id @default(cuid())
  userId      String  @map("user_id") @db.Uuid()
  name        String
  phone       String
  address     String
  detailAddress String? @map("detail_address")
  zipCode     String    @map("zip_code")
  isDefault   Boolean   @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user   UserMetadata @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Order {
  id            String      @id @default(cuid())
  userId        String      @map("user_id") @db.Uuid()
  addressId     String      @map("address_id")
  status        OrderStatus @default(PENDING) @map("status")
  totalAmount   Int         @map("total_amount")
  shippingFee   Int         @default(0) @map("shipping_fee")
  paymentMethod String      @map("payment_method")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  user    UserMetadata @relation(fields: [userId], references: [id])
  address Address      @relation(fields: [addressId], references: [id])
  items   OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String @map("order_id")
  name     String
  price    Int
  quantity Int
  image    String?

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Product {
  id          String @id @default(cuid())
  name        String
  description String
  price       Int
  category    String
  brand       String
  image       String
  stock       Int    @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  reviews Review[]

  @@map("products")
}

model Review {
  id        String   @id @default(cuid())
  userId    String   @map("user_id") @db.Uuid()
  productId String   @map("product_id")
  rating    Int
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user    UserMetadata @relation(fields: [userId], references: [id])
  product Product      @relation(fields: [productId], references: [id])

  @@map("reviews")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
